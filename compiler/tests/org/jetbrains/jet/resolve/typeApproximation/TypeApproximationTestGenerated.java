/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.resolve.typeApproximation;

import junit.framework.Test;
import junit.framework.TestSuite;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/typeApproximation")
public class TypeApproximationTestGenerated extends AbstractTypeApproximationTest {
    public void testAllFilesPresentInTypeApproximation() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/typeApproximation"), Pattern.compile("^(.+)\\.kt$"), true);
    }
    
    @TestMetadata("contravariant.kt")
    public void testContravariant() throws Exception {
        doTest("compiler/testData/typeApproximation/contravariant.kt");
    }
    
    @TestMetadata("covariant.kt")
    public void testCovariant() throws Exception {
        doTest("compiler/testData/typeApproximation/covariant.kt");
    }
    
    @TestMetadata("invariant.kt")
    public void testInvariant() throws Exception {
        doTest("compiler/testData/typeApproximation/invariant.kt");
    }
    
    @TestMetadata("nestedCov.kt")
    public void testNestedCov() throws Exception {
        doTest("compiler/testData/typeApproximation/nestedCov.kt");
    }
    
    @TestMetadata("nestedInv.kt")
    public void testNestedInv() throws Exception {
        doTest("compiler/testData/typeApproximation/nestedInv.kt");
    }
    
    @TestMetadata("nestedInvLevel2.kt")
    public void testNestedInvLevel2() throws Exception {
        doTest("compiler/testData/typeApproximation/nestedInvLevel2.kt");
    }
    
    @TestMetadata("useSiteVarianceIn.kt")
    public void testUseSiteVarianceIn() throws Exception {
        doTest("compiler/testData/typeApproximation/useSiteVarianceIn.kt");
    }
    
    @TestMetadata("useSiteVarianceOut.kt")
    public void testUseSiteVarianceOut() throws Exception {
        doTest("compiler/testData/typeApproximation/useSiteVarianceOut.kt");
    }
    
}
